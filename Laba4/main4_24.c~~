#include <stdio.h>
#include <string.h>#include <string.h>#include <string.h>
struct XY{
    int x;
    int y;                        
};

struct AABB{
    struct XY center;               //координаты центра листа
    struct XY halfDimension;        //середина ветки
};

struct Point{
    struct XY key;
    char *str;
};
struct QuadTree{
#define QT_NODE_CAPACITY 4          //кол-во информации которую можно хранить в одном узле
    struct AABB boundary;           //ограниченный параллелепипед выровненный по коорд.
    struct Point *points[QT_NODE_CAPACITY];
    int busy;
    //Потомки
    struct QuadTree* northWest;     //0
    struct QuadTree* northEast;     //1
    struct QuadTree* southWest;     //2
    struct QuadTree* southEast;     //3 
};
//Функции:
void set_XY(struct XY* obj,int set_x,int set_y);
void set_AABB(struct AABB* obj,
            int set_cen_x,int set_cen_y,
            int set_half_x,int set_half_y);

void set_Point(struct Point *obj,int x,int y,char *str);
struct Point* new_Point(int x,int y,char *str);
void delete_Point(struct Point* obj);
struct QuadTree* new_QuadTree(int z_x,int z_y,int s_x,int s_y);
int XY_sravnenie(struct XY* a,struct XY* b); //>
int Point_sravnenie(struct Point *a,struct Point *b);
int add_Point(struct QuadTree* obj,struct Point* point);
int insert_point(struct QuadTree *obj,struct Point *point,
                int z_x,int z_y, int s_x,int s_y);
int print_Point(struct Point* point,char* fon);
int print_QuadTree(struct QuadTree *obj);
//Глобальные переменные
struct QuadTree *tree;





void set_XY(struct XY* obj,int set_x,int set_y){
    obj->x = set_x;
    obj->y = set_y;
}

void set_AABB(struct AABB* obj,
              int set_cen_x,int set_cen_y,
              int set_half_x,int set_half_y){
    set_XY(&obj->center,        set_cen_x,  set_cen_y );
    set_XY(&obj->halfDimension, set_half_x, set_half_y);
}

void set_Point(struct Point *obj,int x,int y,char *str){
    obj->key.x = x;
    obj->key.y = y;
    /* set_XY(&obj->key,x,y); */
    obj->str = str;
}

struct Point* new_Point(int x,int y,char *str){
    struct Point *newElem;
    newElem  = malloc(sizeof(struct Point));
    set_Point(newElem,x,y,str);
    return newElem;
}

void delete_Point(struct Point* obj){
    free (obj->str);
    free (obj);
}

struct QuadTree* new_QuadTree(int z_x,int z_y,int s_x,int s_y){
    int i;
    struct QuadTree *newObj;
    newObj = malloc(sizeof(struct QuadTree));
    set_AABB(&newObj->boundary,z_x,z_y,s_x,s_y);
    for (i=0;i<QT_NODE_CAPACITY;i++){
        newObj->points[i] = NULL;
    }
    newObj->busy = 0;
    newObj->northEast = NULL;
    newObj->northWest = NULL;
    newObj->southEast = NULL;
    newObj->southWest = NULL;
    return newObj;
}
int XY_sravnenie(struct XY* a,struct XY* b){ //>
    if(a->x>b->x) return 1;
    if(a->x<b->x) return 0;
    if(a->y>b->y) return 1;
    if(a->y<b->y) return 0;
    return -1; //error
}

int Point_sravnenie(struct Point *a,struct Point *b){
    return XY_sravnenie(&a->key,&b->key);
}

int add_Point(struct QuadTree* obj,struct Point* point){
    struct Point *tmp = NULL,*next = point;
    int i,sost;
    /* if(obj->busy<(QT_NODE_CAPACITY-1)){ */
        for(i=0;i<(QT_NODE_CAPACITY);i++){
            if(i<obj->busy)
            {
                sost = Point_sravnenie(point,obj->points[i]);
                if (sost==-1) return -1;
                if (sost) break;
            }
            else
                break;

        }
        if (obj->busy==QT_NODE_CAPACITY) return 1;
        
        if (i>obj->busy) {printf("error add_point"); return -1;}
        if (i==obj->busy){obj->points[obj->busy++] = point; return 0;}
        else{
            for (;i<=obj->busy;i++){ 
                tmp = obj->points[i];
                obj->points[i] = next;
                next = tmp;
            }
            obj->busy++;
        }    
        return 0;
    /* }else{ */
        /* return 1; */
    /* } */
}

int insert_point(struct QuadTree *obj,struct Point *point,
                int z_x,int z_y, int s_x,int s_y){
   int t; 
    if(!obj) {
        obj = new_QuadTree(z_x,z_y,s_x,s_y); 
        add_Point(obj,point);
        //проверка
        return 0;
        }
    
    t = add_Point(obj,point);
    if (t==-1){ printf("Нельзя добавить данные с таким ключём");
        return -1;
    }
    if (t == 0) return 0;
    if (t == 1){
        if(point->key.x<=z_x && point->key.y<=z_y)
            return insert_point(obj->northWest,point,z_x-s_x/2,z_y-s_y/2,s_x/2,s_y/2);
        if(point->key.x<=z_x && point->key.y>z_y)
            return insert_point(obj->northEast,point,z_x-s_x/2,z_y+s_y/2,s_x/2,s_y/2);
        if(point->key.x>z_x && point->key.y<=z_y)
            return insert_point(obj->southWest,point,z_x+s_x/2,z_y-s_y/2,s_x/2,s_y/2);
        if(point->key.x>z_x && point->key.y>z_y)
            return insert_point(obj->southEast,point,z_x+s_x/2,z_y+s_y/2,s_x/2,s_y/2);
    }
}
int print_Point(struct Point* point,char* fon){
    printf("%s [%d,%d] %s", fon,point->key.x,point->key.y,point->str);
    return 1;
}

int print_QuadTree(struct QuadTree *obj){
    int i=0,j=0;
    if (!obj) return 0; 
    if (obj->northWest) 
        i+=print_QuadTree(obj->northWest);
    if (obj->northEast)
    i+=print_QuadTree(obj->northEast);

    for (j=0;j<obj->busy;j++) 
        i+=print_Point(obj->points[j],"str");
    
    if (obj->southWest)
    i+=print_QuadTree(obj->southWest);
    if (obj->southWest) 
    i+=print_QuadTree(obj->southEast);
    return i;
}

void input_Data(){
    char str[180],*str1;
    int x,y;
    struct Point *point;
    printf("input");
    scanf("%d %d %s",&x,&y,str);
    str1 = malloc(sizeof(char)*(strlen(str)+1));
    strcpy(str1,str);

    new_Point(point,x,y);
    insert_point(tree,point,0,0,6,6);
}


int main(){
    tree = NULL;
    while (1){
        input_Data();
        print_QuadTree(tree);
    }

return 0;
} 

